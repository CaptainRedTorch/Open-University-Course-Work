package ClientSide;

import javafx.application.Platform;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.Socket;
import java.util.Random;

public class User implements Serializable {
    private transient Socket connection;
    private transient ObjectInputStream in;
    private transient ObjectOutputStream out;

    private String userID;
    private String username;
    //rgb colors for username display
    private double red;
    private double green;
    private double blue;


    /**
     * Constructor for user
     *
     * @param connection the socket
     * @param username   string username
     */
    public User(Socket connection, String username) {
        this.connection = connection;
        this.username = username;

        //Choose random color and convert to RGB
        Color color = randomColor();
        red = color.getRed();
        green = color.getGreen();
        blue = color.getBlue();

        this.userID = ""; //userID is given by the server

        System.out.println("DEBUG:Creating User: " + this.username + ", address: " + connection.getInetAddress().getHostAddress());
        try {
            this.out = new ObjectOutputStream(connection.getOutputStream());
            this.in = new ObjectInputStream(connection.getInputStream());
            System.out.println("DEBUG:User Connected and initialized");
        } catch (Exception e) {
            System.out.println("Error creating user");

            e.printStackTrace();
        }
    }

    /**
     * @return username of user
     */
    public String getUsername() {
        return username;
    }

    /**
     * compares users userID
     * @param o User to compare
     * @return true when users have the same userID
     */
    @Override
    public boolean equals(Object o) {
        return o instanceof User && userID.equals(((User) o).userID);
    }

    /**
     * new thread to receive server messages
     *
     * @param chatLog     the chatlog compenent in controller
     * @param user        the user using this method
     * @param chatMembers the label component for the chat members username list
     * @param chatName    the label component for the server chat name
     */
    public void receive(ListView<VBox> chatLog, User user, Label chatMembers, Label chatName) {
        new Thread(new Runnable() {
            public void run() {
                boolean error = false;
                //while user is connected to the server
                while (!connection.isClosed()) {
                    try {
                        Object obj = in.readObject();
                        if (obj instanceof Message) {
                            Message message = (Message) obj;
                            switch (message.getType()) {
                                //receive userID generated by server
                                case USERID:
                                    user.setUserID(message.getText());
                                    System.out.println("DEBUG:User UserID received");
                                    break;
                                //receive messages displayed in chat
                                case SERVER, THIS, JOIN_GROUP, LEAVE_GROUP:
                                    System.out.println("DEBUG:User fetching message this,server...");
                                    Platform.runLater(() -> {
                                        Controller.getMessage(chatLog, message, user);
                                    });
                                    System.out.println("DEBUG:User Messages received:" + message);
                                    break;
                                //receive user list
                                case USER_LIST:
                                    System.out.println("DEBUG:User fetching user list");
                                    Platform.runLater(() -> {
                                        Controller.updateUserList(chatMembers, message);
                                    });
                                    System.out.println("DEBUG:Username received");
                                    break;
                                //receive server chat name
                                case SERVER_NAME:
                                    System.out.println("DEBUG:User fetching server name");
                                    Platform.runLater(() -> {
                                        Controller.updateServerName(chatName, message);
                                    });
                                    System.out.println("DEBUG:Username received");
                            }
                        }
                    } catch (IOException | ClassNotFoundException e) {
                        System.out.println("Error receiving message (This error is safe on exit)");
                        closeAll();
                        error = true;
                    }
                }
            }
        }).start();

    }

    /**
     * user send message to server
     * @param message message to send
     */
    public void sendMessage(Message message) {
        if (connection != null && !connection.isClosed()) {
            try {
                System.out.println("DEBUG:Sending message...");
                out.writeObject(message);
                System.out.println("DEBUG:Sent message: " + message);
                out.flush();
            } catch (IOException e) {
                System.out.println("Error sending message");
                e.printStackTrace();
            }
        } else {
            System.out.println("Error sending message, Connection not established");
            closeAll();
            Platform.runLater(Controller::serverDisconnected);
        }
    }

    /**
     * send server join group message
     */
    public void joinGroup() {
        Message message = new Message(getUsername() + " joined the chat", this, Message.Type.JOIN_GROUP);
        sendMessage(message);
    }

    /**
     * send server leave group message
     */
    public void leaveGroup() {
        Message message = new Message(getUsername() + " left the chat", this, Message.Type.LEAVE_GROUP);
        sendMessage(message);
    }

    /**
     * @param userID new userID to set
     */
    public void setUserID(String userID) {
        this.userID = userID;
    }

    /**
     * Convert the rgb colors of user to a single Color representation
     * @return Color of username
     */
    public Color getColor() {
        return Color.color(red, green, blue);
    }

    /**
     * close all connections
     * input, output, socket of user
     */
    public void closeAll() {
        try {
            out.flush();
            in.close();
            out.close();
            connection.close();
        } catch (IOException e) {
            System.out.println("Error closing connection");
            e.printStackTrace();
        }
    }

    /**
     * 16 handpicked colors to fit on a light background
     * @return Random Color from a list of colors
     */
    private Color randomColor() {
        Random random = new Random();
        switch (random.nextInt(17)) {
            case 0:
                return Color.DARKBLUE;
            case 1:
                return Color.CRIMSON;
            case 2:
                return Color.GREEN;
            case 3:
                return Color.GOLDENROD;
            case 4:
                return Color.DARKMAGENTA;
            case 5:
                return Color.DARKTURQUOISE;
            case 6:
                return Color.DARKORANGE;
            case 7:
                return Color.MEDIUMORCHID;
            case 8:
                return Color.PERU;
            case 9:
                return Color.FIREBRICK;
            case 10:
                return Color.YELLOWGREEN;
            case 11:
                return Color.SEAGREEN;
            case 12:
                return Color.FORESTGREEN;
            case 13:
                return Color.TEAL;
            case 14:
                return Color.BLUEVIOLET;
            case 15:
                return Color.LIMEGREEN;
            case 16:
                return Color.DEEPSKYBLUE;
        }
        return Color.DARKBLUE;
    }

}
